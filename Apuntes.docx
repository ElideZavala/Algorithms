// Pedientes a realizar
-- Creamos el elemento.
-- Tiene un next con valor null.
-- Tiene un prev con valor null. => clase de dos lineas
-- Tienen un final o tail con valor igual a la cabeza. 
-- tail recorrera los elementos hasta asignarse al elemento final.

UNDER THE HOOD*/
-- Crear una base de todos los metodos de la primera parte.

// Errores
-- se soluciona el metodo reverse, utilizando un ciclo el cual recorera todos los elementos, para regresarlos en la iteración creando un arreglo con los elementos ordenados contrariamentes. 


--Queues 

// BST 



--FIFO
Primero en llegar, primero en salir

11, 3, 23, 7 
0(n),    , 0(1)

==> BST (Arbol de busqueda binario) <==
--lookup() => Iterar hasta encontrar el número 
--Insert() => es mejor para una lista vinculada porque es de uno para poner algo al final
--lookup() =>  Sera mejor pra un arbol de busqueda binaria  
--remove() =>  Sera mejor pra un arbol de busqueda binaria  

<--HASH Table-->
 set(key, value) => set('nails', 1000) ===> ['nails', 1000]

--Linear Probing 
Hacer direccionamiento abierto colocar en diferentes posiciones 